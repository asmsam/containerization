- Dockerfile inside api folder is responsible for creating the container. Hence we need to build it inside the docker-compose.yml.
- The configuration and helpers inside api/src folder are responsible for providing assistance to the index.js code inside api/src and define environment parameters, such as process.env.PORT, process.env.HOST, process.env.MONGODB_URL
- The MONGODB_URL has the service name and the port. The api is the mongodb name that mongoose creates for us. The service can use the reference to other services, like using the api_db in the api environment variable.
- Every time we build the docker container, the files are copied (using COPY . . command) to the path mentioned in the Dockerfile. Old files are removed and created newly.
- use `npm init react-app frontend` to create frontend forlder
After creating the frontend service inside docker-compose.yml, since we have given no Dockerfile that converts it to a service, it will throw an error: 'failed to solve: failed to read dockerfile: open Dockerfile: no such file or directory'
- On windows, for frontend service, we must add CHOKIDAT_USEPOLLING=true and use react-scripts 4.0.3 in package.json. React-scripts 5.0 + doesn't receive updates/changes hence it won't work
