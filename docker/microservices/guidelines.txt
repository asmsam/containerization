- Dockerfile inside api folder is responsible for creating the container. Hence we need to build it inside the docker-compose.yml.
- The configuration and helpers inside api/src folder are responsible for providing assistance to the index.js code inside api/src and define environment parameters, such as process.env.PORT, process.env.HOST, process.env.MONGODB_URL
- The MONGODB_URL has the service name and the port. The api is the mongodb name that mongoose creates for us. The service can use the reference to other services, like using the api_db in the api environment variable.
- Every time we build the docker container, the files are copied (using COPY . . command) to the path mentioned in the Dockerfile. Old files are removed and created newly.
- The error "Model.prototype.save() no longer accepts a callback" links to the solution given in the udemy under the course video. It has following solution to use async or (working) use futures
https://stackoverflow.com/questions/75586474/mongoose-stopped-accepting-callbacks-for-some-of-its-functions
- use `npm init react-app frontend` to create frontend forlder
After creating the frontend service inside docker-compose.yml, since we have given no Dockerfile that converts it to a service, it will throw an error: 'failed to solve: failed to read dockerfile: open Dockerfile: no such file or directory'
- On windows, for frontend service, we must add CHOKIDAT_USEPOLLING=true and use react-scripts 4.0.3 in package.json. React-scripts 5.0 + doesn't receive updates/changes hence it won't work
- Use command 'npm run build' inside frontend dir to create optimized production build. (Basically it will create the build folder)
- Difference in hot reload and live reload
Live reloading reloads or refreshes the entire app when a file changes. For example, if you were four links deep into your navigation and saved a change, live reloading would restart the app and load the app back to the initial route.
Hot reloading only refreshes the files that were changed without losing the state of the app. For example, if you were four links deep into your navigation and saved a change to some styling, the state would not change, but the new styles would appear on the page without having to navigate back to the page you are on because you would still be on the same page.
Hot reload is not recommended in production.
- For frontend, in this project, we need to serve only static pages. Hence we don't need the folders inside frontend apart from frontend/build/static (although I have kept them). To install serve package, use `npm install -g serve`. Then run `serve -s build` or to specify port, run `serve -s build -l <port>`.
- We are using same Dockerfile for dev and production. Inside frontend, we don't need `RUN npm run build` for dev (why?) but it's okay to keep it for dev as well. After that, install the serve package inside the container - add `RUN npm install -g serve`. The options inside docker-compose.yml under frontend service after stdin... are not needed for production
- use `docker logs <service-name>` to see specific logs of a service if those are not visible after the `docker-compose up (--build)` command.
- To run in the dev mode, use `docker-compose -f docker-compose.yml -f docker-compose.dev.yml --build` and for production, just `docker-compose up --build`
- To run any shell command inside a container, use `docker exec -it <container-name> sh`. The src folder will only be available if the dev mode is running via the docker-compose.dev.yml.
- nginx is a proxy that stands between the host of the production or the domain name and the user requests. 80 is by default the port that the requests go to. How do we transfer each request made to the services we made - using nginx.
- Use `ps aux` to view the running processes in BSD. When using BSD-style options with the ps command, you must exclude the dash (-), however, you can group your options. For example, notice the ps aux commandâ€™s options; aux is formatted in the BSD style.
- Inside the nginx.conf.<mode> where mode is prod or dev, we write location, with a '/' which means all the requests will be dealt with under this section. If we have any specific request, eg. api service, we proceed it with api like - 'location /api {}'
Proxy pass is the direction of the requests to certain host.
- Docker-compose allows us to build URLs (such as https//frontend:3000 in nginx config prod) which are not exposed to the world / is not accessible by any DNS system. This is the 'killer' feature of docker-compose.
- Do not put a colon inside the nginx.conf file
- To route the traffic to a specific host used inside the docker-compose.yml, use the host file and route the localhost 127.0.0.1 to dockermicroservices.com
- Since inside nginx/nginx.conf.prod, we have directed all the traffic to fronted:3000, we don't need to explicitely write the ports in the docker-compose.yml. The service:port kind of configuration in the proxy_pass exposes that port.

- API service needs to be used by the frontend and the auth service needs to be used by the API and the frontend.
    - Frontend service communicates with the API service to get data from the DB
    - If any user information is required, communication with auth service is required, which checks DB reconrds with auth_db.
    Eg. checking current user - if the same person is the author of the post, then we allow them to edit or do more operations. In this case, either frontend can communicate with API to get the authorization or can communicate directly with auth service for authentication.
- Between the services, to communicate using docker network, we can use environment variables such as to define the URLs for auth to access the frontend.
- Axios node package : Promise based HTTP client for browser and node.js. It is to exchange data. Install it using `npm install axios` inside API.

- `docker network` gets created automatically (behind the scenes) and that way the services communicate with each other.
- By default, 'bridge' is the network used by docker. We can define our own network inside docker-compose as well.

- Frontend doesn't work like the backend where services can easily communicate via the bridge network. It only has access to the host that we have defined inside the hosts file.

- Frontend doesn't work like the backend where services can easily communicate via the bridge network. It only has access to the host that we have defined inside the hosts file.
- The browser knows only the host that 127.0.0.1 points to (localhost) and the requests can be made easily only on the same domain/sub-domain. Which means by having the IP address of the server and /api endpoint will not work to get the data.
- For this- Cross Origin Policies (CORS - Cross Origin Resource Sharing) can be referred. 'Same Origin' HTTP requests are answered i.e. same host requests. But by default, browsers disable the CORS requests made from scripts.
- nginx will serve as a middle-person to understand the requests made to the host/api/endpoint.
- In its configuration, we need to mention that for the requests coming for the location /api, rewrite the url and route it to the api service. (here the getters inside the api/src/index.js are modified by removing the /api/xxx from the app.get()).
Eg. By writing in the search bar dockermicroservices.com/api/post, the request will be routed to the service 'posts'.
- To Do : check how to rewrite URL
- API service is stateless. Which means that it is independent of any public URL. So the HOST used inside the docker-compose.yml is useful only when we want to redirect a customer to some other URL, otherwise it's not needed.
- For the error
WebSocketClient.js:13  WebSocket connection to 'ws://dockermicroservices.local:3000/ws' failed
The nginx.conf.dev file is added with proxy_http_version, proxy_set_header.
But it is not working.
