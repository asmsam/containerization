services:
  frontend:
    build: ./frontend
    container_name: microservices-frontend
    command: serve -s build -l 3000 #npm run start #OR npm start
    restart: unless-stopped
    #ports:
    #  - "3000:3000"
    # Since it fails in creating interactive console / the frontend service, add these (to the dev docker-compose)
    # stdin_open: true
    # tty: true
    #volumes:
    #  - ./frontend/src:/usr/src/app/src/
    #environment:
    #  - CHOKIDAR_USEPOLLING=true
    networks:
      - my-network

  api:
    build: ./api
    container_name: microservices-api
    command: npm run start
    restart: unless-stopped
    ports:
      #Host:Container
      - "3001:3001"
    environment:
      - PORT=3001
      - HOST=http://dockermicroservices.com
      - MONGODB_URL=mongodb://api_db:27017/api
      - AUTH_API_URL=http://auth:3002/api # Accessing auth service from API service using the auth service name and port
    depends_on:
      - api_db
    networks:
      - my-network

  auth:
    build: ./auth
    container_name: microservices-auth
    command: npm run start
    restart: unless-stopped
    ports: # We don't need to explicitely mention these ports since we are using the AUTH_API_URL in which port 3002
      - "3002:3002"
    environment:
      - PORT=3002
      - HOST=http://dockermicroservices.com
      - MONGODB_URL=mongodb://api_db:27017/auth
      - API_URL=http://api:3001/api
    depends_on:
      - auth_db
    networks:
      - my-network

  api_db:
    #This service needs to start before the api service starts, since db is supposed to start before the server. If not, service api may crash.
    #build not required for this service since there is no Dockerfile for the DB connection and we don't need to create any environment for it.
    image: mongo:latest
    container_name: microservices-api-db
    volumes:
      #run `docker volume ls` and then `docker inspect <VOLUME NAME>` to find the details of the volume created.
      - mongodb_api:/data/db
    networks:
      - my-network

  auth_db:
    image: mongo:latest
    container_name: microservices-auth-db
    volumes:
      - mongodb_auth:/data/db
    networks:
      - my-network

  nginx:
    image: nginx:stable-alpine
    container_name: microservices-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf.prod:/etc/nginx/conf.d/nginx.conf #To use this file inside the container. Where did this path come from?
    depends_on:
      - frontend
    networks:
      - my-network

volumes:
  #This docker_compose.yml file is for production so we don't want to make any changes to the source files. Hence there are no volumes in the api service
  mongodb_api:
  mongodb_auth:

networks: # This is not mandatory to be specified, and a default network with the same driver is created. We can rename the n/w using this -
  my-network:
    driver: bridge
